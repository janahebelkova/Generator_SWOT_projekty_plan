<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SWOT, Projekty a Akƒçn√≠ Pl√°n</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">

        <header class="text-center mb-12">
            <h1 class="text-4xl md:text-5xl font-bold text-[#004d40] mb-2">Gener√°tor SWOT anal√Ωzy, projekt≈Ø a akƒçn√≠ho pl√°nu</h1>
            <p class="text-lg text-[#00796b]">Komplexn√≠ n√°stroj pro diagnostiku a pl√°nov√°n√≠ zmƒõn ve firmƒõ.</p>
        </header>

        <main>
            <section id="swot-section" class="mb-16">
                 <div class="bg-white rounded-lg shadow-md p-6 md:p-8">
                    <h2 class="text-3xl font-bold text-center text-[#004d40] mb-8">1. Vytvo≈ôte si anal√Ωzu ‚ú®</h2>
                    <p class="max-w-3xl mx-auto text-lg text-center mb-6">Zadejte kl√≠ƒçov√© informace o va≈°√≠ firmƒõ nebo probl√©mu, kter√Ω ≈ôe≈°√≠te, a nechte AI vygenerovat n√°vrh SWOT anal√Ωzy s ƒç√≠slovan√Ωmi ukazateli.</p>
                    <div class="flex flex-col items-center">
                        <textarea id="swotInput" class="w-full p-4 border border-gray-300 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-[#00796b]" rows="6" placeholder="Nap≈ô√≠klad: 'Jsme mal√° v√Ωrobn√≠ firma s dlouhou histori√≠, ale konkurence na trhu roste a na≈°i zamƒõstnanci jsou unaven√≠ a pasivn√≠.'"></textarea>
                        <button id="generateSwotBtn" class="bg-[#f57c00] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#d32f2f] transition-colors flex items-center justify-center">
                            Generovat SWOT anal√Ωzu ‚ú®
                        </button>
                    </div>
                    <div id="swotResult" class="mt-8 hidden">
                        <h3 class="text-2xl font-semibold text-[#00796b] mb-4">V√Ωsledek SWOT anal√Ωzy</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="bg-[#b2dfdb] p-4 rounded-lg">
                                <h4 class="font-bold text-lg text-[#004d40]">Siln√© str√°nky</h4>
                                <ul id="swotStrengths" class="list-none space-y-2 mt-2"></ul>
                            </div>
                            <div class="bg-[#ffcdd2] p-4 rounded-lg">
                                <h4 class="font-bold text-lg text-[#d32f2f]">Slab√© str√°nky</h4>
                                <ul id="swotWeaknesses" class="list-none space-y-2 mt-2"></ul>
                            </div>
                            <div class="bg-[#e0f2f1] p-4 rounded-lg">
                                <h4 class="font-bold text-lg text-[#00796b]">P≈ô√≠le≈æitosti</h4>
                                <ul id="swotOpportunities" class="list-none space-y-2 mt-2"></ul>
                            </div>
                            <div class="bg-[#ffeb3b] p-4 rounded-lg">
                                <h4 class="font-bold text-lg text-[#f57c00]">Hrozby</h4>
                                <ul id="swotThreats" class="list-none space-y-2 mt-2"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section id="projects-section" class="mb-16 hidden">
                 <div class="bg-white rounded-lg shadow-md p-6 md:p-8">
                    <h2 class="text-3xl font-bold text-center text-[#004d40] mb-8">2. Navrhovan√© projekty pro zmƒõnu</h2>
                    <p class="max-w-3xl mx-auto text-lg text-center mb-6">Na z√°kladƒõ va≈°√≠ SWOT anal√Ωzy byly vygenerov√°ny konkr√©tn√≠ projekty, kter√© vyu≈æ√≠vaj√≠ va≈°e siln√© str√°nky a p≈ô√≠le≈æitosti k ≈ôe≈°en√≠ slab√Ωch str√°nek a hrozeb.</p>
                    <div class="flex flex-col items-center">
                        <button id="generateProjectsBtn" class="bg-[#00796b] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#004d40] transition-colors flex items-center justify-center">
                            Generovat projekty pro zmƒõnu ‚ú®
                        </button>
                    </div>
                    <div id="projectsResult" class="mt-8 hidden">
                        <div id="projectsList" class="space-y-6 mb-8"></div>
                    </div>
                    <button id="generateActionPlanBtn" class="bg-[#f57c00] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#d32f2f] transition-colors flex items-center justify-center hidden">
                        Generovat akƒçn√≠ pl√°n üöÄ
                    </button>
                </div>
            </section>
            
            <section id="action-plan-section" class="mb-16 hidden">
                 <div class="bg-white rounded-lg shadow-md p-6 md:p-8">
                    <h2 class="text-3xl font-bold text-center text-[#004d40] mb-8">3. Akƒçn√≠ pl√°n pro zaveden√≠ projekt≈Ø</h2>
                    <p class="max-w-3xl mx-auto text-lg text-center mb-6">N√°sleduj√≠c√≠ pl√°n rozdƒõluje projekty na konkr√©tn√≠ kroky, abyste mohli okam≈æitƒõ zaƒç√≠t s implementac√≠ zmƒõn.</p>
                    <div id="actionPlanResult" class="mt-8">
                        <div id="actionPlanList" class="space-y-8"></div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <script>
        const swotInput = document.getElementById('swotInput');
        const generateSwotBtn = document.getElementById('generateSwotBtn');
        const swotResultDiv = document.getElementById('swotResult');
        const swotStrengthsList = document.getElementById('swotStrengths');
        const swotWeaknessesList = document.getElementById('swotWeaknesses');
        const swotOpportunitiesList = document.getElementById('swotOpportunities');
        const swotThreatsList = document.getElementById('swotThreats');
        const projectsSection = document.getElementById('projects-section');
        const generateProjectsBtn = document.getElementById('generateProjectsBtn');
        const projectsResultDiv = document.getElementById('projectsResult');
        const projectsListDiv = document.getElementById('projectsList');
        const generateActionPlanBtn = document.getElementById('generateActionPlanBtn');
        const actionPlanSection = document.getElementById('action-plan-section');
        const actionPlanListDiv = document.getElementById('actionPlanList');
        
        let generatedSwot = {};
        let generatedProjects = [];

        generateSwotBtn.addEventListener('click', async () => {
            const problemDescription = swotInput.value.trim();
            if (!problemDescription) return;

            generateSwotBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generuji...';
            generateSwotBtn.disabled = true;
            swotResultDiv.classList.add('hidden');
            projectsSection.classList.add('hidden');
            actionPlanSection.classList.add('hidden');
            
            try {
                let chatHistory = [];
                const prompt = `Jste zku≈°en√Ω obchodn√≠ konzultant. Na z√°kladƒõ n√°sleduj√≠c√≠ho popisu podniku/probl√©mu vytvo≈ôte komplexn√≠ SWOT anal√Ωzu (Siln√© str√°nky, Slab√© str√°nky, P≈ô√≠le≈æitosti, Hrozby). Ka≈æd√° polo≈æka mus√≠ b√Ωt struƒçn√° a psan√° v ƒçesk√©m jazyce. Odpovƒõzte pouze ve form√°tu JSON. Zde je popis: "${problemDescription}"`;
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "OBJECT",
                            properties: {
                                "strengths": { "type": "ARRAY", "items": { "type": "STRING" } },
                                "weaknesses": { "type": "ARRAY", "items": { "type": "STRING" } },
                                "opportunities": { "type": "ARRAY", "items": { "type": "STRING" } },
                                "threats": { "type": "ARRAY", "items": { "type": "STRING" } }
                            }
                        }
                    }
                };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                
                const json = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                if (json) {
                    generatedSwot = JSON.parse(json);
                    
                    swotStrengthsList.innerHTML = generatedSwot.strengths.map((item, index) => `<li>S${index + 1}: ${item}</li>`).join('');
                    swotWeaknessesList.innerHTML = generatedSwot.weaknesses.map((item, index) => `<li>W${index + 1}: ${item}</li>`).join('');
                    swotOpportunitiesList.innerHTML = generatedSwot.opportunities.map((item, index) => `<li>O${index + 1}: ${item}</li>`).join('');
                    swotThreatsList.innerHTML = generatedSwot.threats.map((item, index) => `<li>T${index + 1}: ${item}</li>`).join('');

                    swotResultDiv.classList.remove('hidden');
                    projectsSection.classList.remove('hidden');
                } else {
                    console.error("API response was not in the expected format.", result);
                }
            } catch (error) {
                console.error("Failed to fetch SWOT analysis:", error);
            } finally {
                generateSwotBtn.innerHTML = 'Generovat SWOT anal√Ωzu ‚ú®';
                generateSwotBtn.disabled = false;
            }
        });
        
        generateProjectsBtn.addEventListener('click', async () => {
            generateProjectsBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generuji...';
            generateProjectsBtn.disabled = true;
            projectsResultDiv.classList.add('hidden');
            generateActionPlanBtn.classList.add('hidden');
            actionPlanSection.classList.add('hidden');

            try {
                const swotPrompt = JSON.stringify(generatedSwot, null, 2);
                let chatHistory = [];
                const prompt = `Jste zku≈°en√Ω konzultant pro ≈ô√≠zen√≠ zmƒõn. Na z√°kladƒõ n√°sleduj√≠c√≠ SWOT anal√Ωzy vytvo≈ôte seznam 3-5 konkr√©tn√≠ch projekt≈Ø pro zmƒõnu. Ka≈æd√Ω projekt by mƒõl strategicky vyu≈æ√≠vat siln√© str√°nky a p≈ô√≠le≈æitosti k ≈ôe≈°en√≠ slab√Ωch str√°nek a hrozeb. Odpovƒõzte pouze ve form√°tu JSON. Zde je SWOT anal√Ωza: ${swotPrompt}`;
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    "projectName": { "type": "STRING" },
                                    "projectDescription": { "type": "STRING" }
                                }
                            }
                        }
                    }
                };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                
                const json = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                if (json) {
                    generatedProjects = JSON.parse(json);
                    
                    projectsListDiv.innerHTML = generatedProjects.map(project => `
                        <div class="bg-gray-50 p-6 rounded-lg border-l-4 border-[#00796b] shadow-sm">
                            <h4 class="font-bold text-lg text-[#004d40] mb-2">${project.projectName}</h4>
                            <p class="text-gray-700">${project.projectDescription}</p>
                        </div>
                    `).join('');

                    projectsResultDiv.classList.remove('hidden');
                    generateActionPlanBtn.classList.remove('hidden');
                } else {
                    console.error("API response was not in the expected format.", result);
                }
            } catch (error) {
                console.error("Failed to fetch projects:", error);
            } finally {
                generateProjectsBtn.innerHTML = 'Generovat projekty pro zmƒõnu ‚ú®';
                generateProjectsBtn.disabled = false;
            }
        });

        generateActionPlanBtn.addEventListener('click', async () => {
            generateActionPlanBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generuji pl√°n...';
            generateActionPlanBtn.disabled = true;
            actionPlanSection.classList.add('hidden');
            
            try {
                const projectsPrompt = JSON.stringify(generatedProjects, null, 2);
                let chatHistory = [];
                const prompt = `Jste zku≈°en√Ω projektov√Ω mana≈æer. Pro ka≈æd√Ω z n√°sleduj√≠c√≠ch projekt≈Ø vytvo≈ôte detailn√≠ akƒçn√≠ pl√°n v ƒçesk√©m jazyce. Pl√°n by mƒõl obsahovat: projectName, goals (3-4 struƒçn√© c√≠le), keySteps (5-7 konkr√©tn√≠ch krok≈Ø s odpovƒõdnost√≠ - pou≈æijte placeholder 'vedouc√≠ t√Ωmu'), a timeline (hrub√Ω odhad v mƒõs√≠c√≠ch nebo kvart√°lech). Odpovƒõzte pouze ve form√°tu JSON. Zde jsou projekty: ${projectsPrompt}`;
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    "projectName": { "type": "STRING" },
                                    "goals": { "type": "ARRAY", "items": { "type": "STRING" } },
                                    "keySteps": { "type": "ARRAY", "items": { "type": "STRING" } },
                                    "timeline": { "type": "STRING" }
                                }
                            }
                        }
                    }
                };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                
                const json = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                if (json) {
                    const actionPlans = JSON.parse(json);
                    
                    actionPlanListDiv.innerHTML = actionPlans.map(plan => `
                        <div class="bg-gray-50 p-6 rounded-lg border-l-4 border-[#f57c00] shadow-sm">
                            <h4 class="font-bold text-xl text-[#004d40] mb-2">${plan.projectName}</h4>
                            <div class="mb-4">
                                <h5 class="font-semibold text-[#00796b]">C√≠le:</h5>
                                <ul class="list-disc list-inside space-y-1 text-gray-700">
                                    ${plan.goals.map(goal => `<li>${goal}</li>`).join('')}
                                </ul>
                            </div>
                            <div class="mb-4">
                                <h5 class="font-semibold text-[#00796b]">Kl√≠ƒçov√© kroky:</h5>
                                <ul class="list-decimal list-inside space-y-1 text-gray-700">
                                    ${plan.keySteps.map(step => `<li>${step}</li>`).join('')}
                                </ul>
                            </div>
                            <div>
                                <h5 class="font-semibold text-[#00796b]">ƒåasov√Ω pl√°n:</h5>
                                <p class="text-gray-700">${plan.timeline}</p>
                            </div>
                        </div>
                    `).join('');

                    actionPlanSection.classList.remove('hidden');
                } else {
                    console.error("API response was not in the expected format.", result);
                }
            } catch (error) {
                console.error("Failed to fetch action plan:", error);
            } finally {
                generateActionPlanBtn.innerHTML = 'Generovat akƒçn√≠ pl√°n üöÄ';
                generateActionPlanBtn.disabled = false;
            }
        });
    </script>
</body>
</html>

